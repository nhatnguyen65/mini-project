const express = require("express");
const router = express.Router();
const Product = require("../models/Product");
const Warehouse = require("../models/Warehouse");
const {
    authMiddleware,
    adminMiddleware,
} = require("../middleware/authMiddleware");

/* ===== ADMIN ROUTES ===== */
// L·∫•y danh s√°ch s·∫£n ph·∫©m k√®m stock kho
router.get("/all", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const products = await Product.find();
        const warehouse = await Warehouse.findOne({}).populate(
            "products.product"
        );

        const productsWithStock = products.map((p) => {
            const wProduct = warehouse?.products.find((wp) =>
                wp.product._id.equals(p._id)
            );
            return {
                ...p._doc,
                stock: wProduct?.stock || 0,
            };
        });

        res.json(productsWithStock);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// L·∫•y chi ti·∫øt s·∫£n ph·∫©m k√®m stock kho (admin)
router.get("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product)
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

        const warehouse = await Warehouse.findOne({}).populate(
            "products.product"
        );
        const wProduct = warehouse?.products.find((wp) =>
            wp.product._id.equals(product._id)
        );

        res.json({
            ...product._doc,
            stock: wProduct?.stock || 0,
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});
// th√™m s·∫£n ph·∫©m
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        // 1Ô∏è‚É£ T·∫°o s·∫£n ph·∫©m m·ªõi
        const { stock = 0, ...productData } = req.body; // t√°ch stock ra ri√™ng
        const newProduct = new Product(productData);
        const savedProduct = await newProduct.save();

        // 2Ô∏è‚É£ T√¨m warehouse hi·ªán t·∫°i (n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi)
        let warehouse = await Warehouse.findOne();
        if (!warehouse) {
            warehouse = new Warehouse({ products: [] });
        }

        // 3Ô∏è‚É£ Th√™m s·∫£n ph·∫©m v√†o danh s√°ch trong warehouse
        warehouse.products.push({
            product: savedProduct._id,
            stock: Number(stock) || 0,
        });
        await warehouse.save();

        // 4Ô∏è‚É£ Tr·∫£ v·ªÅ k·∫øt qu·∫£
        res.status(201).json({
            ...savedProduct._doc,
            stock: Number(stock) || 0,
        });
    } catch (err) {
        console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", err);
        res.status(500).json({ error: err.message });
    }
});
// C·∫≠p nh·∫≠t s·∫£n ph·∫©m (v√† t·ªìn kho n·∫øu c√≥)
router.patch("/:id", async (req, res) => {
    try {
        const { stock, ...productData } = req.body; // t√°ch ri√™ng stock

        // --- C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m ---
        const updatedProduct = await Product.findByIdAndUpdate(
            req.params.id,
            { $set: productData },
            { new: true, runValidators: true }
        );

        if (!updatedProduct)
            return res
                .status(404)
                .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });

        // --- N·∫øu c√≥ field stock th√¨ c·∫≠p nh·∫≠t lu√¥n trong Warehouse ---
        if (typeof stock === "number") {
            const warehouse = await Warehouse.findOne(); // gi·∫£ s·ª≠ ch·ªâ c√≥ 1 kho

            if (warehouse) {
                const existing = warehouse.products.find((p) =>
                    p.product.equals(req.params.id)
                );

                if (existing) {
                    existing.stock = stock; // g√°n s·ªë l∆∞·ª£ng m·ªõi
                } else {
                    warehouse.products.push({
                        product: req.params.id,
                        stock: stock,
                    });
                }

                await warehouse.save();
            }
        }

        res.json({
            success: true,
            message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
            product: updatedProduct,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m!",
        });
    }
});

//X√≥a s·∫£n ph·∫©m (Delete)
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const product = await Product.findByIdAndDelete(req.params.id);
        if (!product)
            return res
                .status(404)
                .json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ xo√°!" });

        // üîπ Xo√° lu√¥n s·∫£n ph·∫©m trong warehouse (n·∫øu c√≥)
        const warehouse = await Warehouse.findOne({});
        if (warehouse) {
            warehouse.products = warehouse.products.filter(
                (p) => !p.product.equals(req.params.id)
            );
            await warehouse.save();
        }

        res.json({ message: "ƒê√£ xo√° s·∫£n ph·∫©m th√†nh c√¥ng!" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

/* ===== USER ROUTES ===== */
// L·∫•y danh s√°ch s·∫£n ph·∫©m
router.get("/", async (req, res) => {
    try {
        const products = await Product.find();
        res.json(products);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
router.get("/:id", async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product)
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        res.json(product);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

module.exports = router;
